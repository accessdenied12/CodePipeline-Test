Description: 'VPC/LAMP/Wordpress Stack Created By:Arthur'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Global Value Inputs"
        Parameters:
          - EnvironmentSize
          - SGName
          - CidrBlock
          - VPCName
          - PublicSubnet1
      -
        Label:
          default: "Database Inputs"
        Parameters:
          - DatabaseName
          - DatabaseUser
          - DatabasePassword
          - DatabaseName
          - DBTag
          - PrivateSubnet1
          - PrivateSubnet2
      -
        Label:
          default: "EC2 Inputs"
        Parameters:
          - EC2Tag
          - index2String
          - KeyName
          - SubnetName
          - SSHAllow
    ParameterLabels:
      DBTag:
        default: "Name for DB in console"
      KeyName:
        default: "This is the SSH keypair used to connect to the EC2 instance"
Parameters:
  SSHAllow:
    Description: "Cidr to allow for  SSH access"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    MinLength: '9'
    MaxLength: '18'
    Type: String
  CidrBlock:
   Description: "Cidr block for VPC (e.g 10.0.0.0/24)"
   ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
   AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
   MinLength: '9'
   MaxLength: '18'
   Type: String
  VPCName:
   Description: "Give your VPC a name tag"
   Type: String
  PublicSubnet1:
   Description: "Cidr block for public subnet 1 (must be within the VPC Cidr range)"
   ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
   AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
   MinLength: '9'
   MaxLength: '18'
   Type: String
  PrivateSubnet1:
   Description: "Cidr block for PrivateSubnet subnet 1 (must be within the VPC Cidr range)"
   Type: String
   ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
   AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
   MinLength: '9'
   MaxLength: '18'
   Type: String
  PrivateSubnet2:
   Description: "Cidr block for PrivateSubnet subnet 1 (must be within the VPC Cidr range)"
   Type: String
   ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/x.
   AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
   MinLength: '9'
   MaxLength: '18'
   Type: String
  SGName: 
   Description: "Give the SG a name"
   Type: String
  EC2Tag:
    Description: "Name tag for EC2 Instance"
    Type: String
  DBTag:
    Description: "Name tag for RDS Instance"
    Type: String
  KeyName:
    Description: 'EC2 SSH Key for App Instance'
    Type: 'AWS::EC2::KeyPair::KeyName'
  EnvironmentSize:
    Type: String
    Default: SMALL
    AllowedValues:
      - SMALL
      - MEDIUM
      - LARGE
    Description: Select Environment Size (S,M,L)
  DatabaseName:
    Type: String
    Default: wordpress
  DatabaseUser:
    Type: String
    Default: wordpress
  DatabasePassword:
    Type: String
    Default: w0rdpr355
    NoEcho: true

Mappings:
  InstanceSize:
    SMALL:
      "EC2" : "t2.micro"
      "DB" : "db.t2.micro"
    MEDIUM:
      "EC2" : "t2.small"
      "DB" : "db.t2.small"
    LARGE:
      "EC2" : "t2.medium"
      "DB" : "db.t2.medium"
  RegionMap:
    us-east-1:
      "AMALINUX" : "ami-0b33d91d" # Amazon Linux 3/17
    us-east-2:
      "AMALINUX" : "ami-c55673a0" # Amazon Linux 3/17
    us-west-1:
      "AMALINUX" : "ami-165a0876" # Amazon Linux 3/17
    us-west-2:
      "AMALINUX" : "ami-f173cc91" # Amazon Linux 3/17
 

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref CidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name 
        Value: !Ref VPCName
  PubSub1:
    Type: "AWS::EC2::Subnet"
    Properties:
     VpcId: !Ref VPC
     CidrBlock: !Ref PublicSubnet1
     MapPublicIpOnLaunch: true
     Tags:
     - Key: Name
       Value: "Arthur-WP-PubSub1"
  PrivSub1:
    Type: "AWS::EC2::Subnet"
    Properties:
     VpcId: !Ref VPC
     CidrBlock: !Ref PrivateSubnet1
     AvailabilityZone: 
      Fn::Select: 
        - 0
        - Fn::GetAZs: ""
     Tags:
     - Key: Name
       Value: "Arthur-WP-PrivSub1"
  PrivSub2:
    Type: "AWS::EC2::Subnet"
    Properties:
     VpcId: !Ref VPC
     CidrBlock: !Ref PrivateSubnet2
     AvailabilityZone: 
      Fn::Select: 
        - 1
        - Fn::GetAZs: ""
     Tags:
     - Key: Name
       Value: "Arthur-WP-PrivSub2"
  DBSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security Group for RDS Instance"
      SecurityGroupIngress:
       - IpProtocol: tcp
         FromPort: '3306'
         ToPort: '3306'
         CidrIp: !Ref CidrBlock
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: "Arthur-WP-DBSG"
  SG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security Group For WP CFT"
      SecurityGroupIngress:
       - IpProtocol: tcp
         FromPort: '80'
         ToPort: '80'
         CidrIp: '0.0.0.0/0'
       - IpProtocol: tcp
         FromPort: '22'
         ToPort: '22'
         CidrIp: !Ref SSHAllow
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: "Arthur-WP-SG"
  IGW: 
    Type: "AWS::EC2::InternetGateway"
    Properties:
     Tags:
     - Key: Name
       Value: "Arthur-WP-IGW"
  VPCGatewayAttachment: 
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties: 
     VpcId: !Ref VPC
     InternetGatewayId: !Ref IGW
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  PublicRoute: 
    Type: "AWS::EC2::Route"
    DependsOn: VPCGatewayAttachment
    Properties: 
     RouteTableId: 
      Ref: PublicRouteTable
     DestinationCidrBlock: "0.0.0.0/0"
     GatewayId: !Ref IGW
  RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
     SubnetId: !Ref PubSub1
     RouteTableId: !Ref PublicRouteTable
  RouteTableAssociation0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
     SubnetId: !Ref PrivSub1
     RouteTableId: !Ref PublicRouteTable
  RouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
     SubnetId: !Ref PrivSub2
     RouteTableId: !Ref PublicRouteTable   
  DBSubGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Subnet Group for RDS with Private Subnets"
      SubnetIds:
       - !Ref PrivSub1
       - !Ref PrivSub2
  DB:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: 5
      StorageType: gp2
      DBSubnetGroupName: !Ref DBSubGroup
      DBInstanceClass: !FindInMap [InstanceSize, !Ref EnvironmentSize, DB] 
      DBName: !Ref DatabaseName
      Engine: MySQL
      MasterUsername: !Ref DatabaseUser
      MasterUserPassword: !Ref DatabasePassword
      Tags:
       - Key: Name 
         Value: !Ref DBTag
      VPCSecurityGroups:
       - !GetAtt DBSG.GroupId
  EC2:
    Type: "AWS::EC2::Instance"
    Properties:
      Tags:
       - Key: Name
         Value: !Ref EC2Tag
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX] 
      InstanceType: !FindInMap [InstanceSize, !Ref EnvironmentSize, EC2]
      KeyName: !Ref KeyName
      SecurityGroupIds:
       - !GetAtt SG.GroupId
      SubnetId: !Ref PubSub1
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y aws-cfn-bootstrap 
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2 --configsets wordpress --region ${AWS::Region}
            yum -y update
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          wordpress:
            - "configure_cfn"
            - "install_wordpress"
            - "config_wordpress"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2 --configsets wordpress --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        install_wordpress:
          packages:
            yum:
              httpd: []
              php: []
              mysql: []
              php-mysql: []
          sources:
            /var/www/html: "http://wordpress.org/latest.tar.gz"
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
        config_wordpress:
          commands:
            01_clone_config:
              cwd: "/var/www/html/wordpress"
              test: "test ! -e /var/www/html/wordpress/wp-config.php"
              command: "cp wp-config-sample.php wp-config.php"
            02_inject_dbhost:
              cwd: "/var/www/html/wordpress"
              command: !Sub |
                sed -i 's/localhost/${DB.Endpoint.Address}/g' wp-config.php
            03_inject_dbname:
              cwd: "/var/www/html/wordpress"
              command: !Sub |
                sed -i 's/database_name_here/${DatabaseName}/g' wp-config.php
            04_inject_dbuser:
              cwd: "/var/www/html/wordpress"
              command: !Sub |
                sed -i 's/username_here/${DatabaseUser}/g' wp-config.php
            05_inject_dbpassword:
              cwd: "/var/www/html/wordpress"
              command: !Sub |
                sed -i 's/password_here/${DatabasePassword}/g' wp-config.php

Outputs:
  WordpressAdminURL:
    Value: !Join ["", ["http://", !GetAtt EC2.PublicIp, "/wordpress", "/wp-admin"]]
    Description: "Wordpress Admin console"
  WordpressSiteURL:
    Value: !Join ["", ["http://", !GetAtt EC2.PublicIp, "/wordpress"]]
    Description: "Wordpress Site"
